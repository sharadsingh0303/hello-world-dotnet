pipeline {
    agent any   
    environment {
        DOCKER_IMAGE = "test3:${BUILD_NUMBER}"
        DOCKER_HUB_CREDENTIALS = credentials('Docker-hub')
        UAT_SSH_KEY = credentials('1') 
    }
    parameters {
       choice(name: 'ENVIRONMENT', choices: ['UAT', 'Production'], description: 'Choose the environment to deploy to')
    }
    stages {
        stage('Clone Code') {
            steps {
                echo "scm checkout"
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}")
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "docker-hub") {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        stage('Deploy to UAT') {
            steps {
                script {
                    echo "Deploying to UAT environment on EC2 instance..."
                    def ec2Ip = (params.ENVIRONMENT == 'UAT') ? env.UAT_EC2_IP : env.PROD_EC2_IP 
                    // Use `sshagent` to access the stored SSH key securely
                    sshagent(['1']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ec2-user@${ec2Ip} '
                                docker stop fervent_yalow 
                                docker rm fervent_yalow
                                docker run -p 8081:80 -d test2 ${DOCKER_IMAGE}
                            '
                        """
                    }
                }
            }
        }
        stage('Verify Health Check') {
            steps {
                script {
                    def ec2IP = (ENVIRONMENT == 'UAT') ? "${env.UAT_EC2_IP}" : "${env.PROD_EC2_IP}"
                    def healthCheckUrl = "http://${ec2IP}:8081/api/hello"
                    
                    sh """
                        if curl -f ${healthCheckUrl}; then
                            echo "Health check passed. Application is running successfully."
                        else
                            echo "Health check failed. Application may not be running correctly."
                            exit 1
                        fi
                    """
                }
            }
        }
    }
}